// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using TelematicsData;

#nullable disable

namespace TelematicsData.Migrations
{
    [DbContext(typeof(TelematicsDbContext))]
    [Migration("20250623040740_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TelematicsCore.Models.Alert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TelematicsEventId")
                        .HasColumnType("bigint");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsAcknowledged");

                    b.HasIndex("TelematicsEventId");

                    b.HasIndex("VehicleId", "CreatedAt");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("TelematicsCore.Models.TelematicsEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<double?>("EngineCoolantTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("EngineLoad")
                        .HasColumnType("float");

                    b.Property<int?>("EngineRPM")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("FuelLevel")
                        .HasColumnType("float");

                    b.Property<double?>("Heading")
                        .HasColumnType("float");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double?>("Odometer")
                        .HasColumnType("float");

                    b.Property<DateTime>("ProcessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("Speed")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("Timestamp");

                    b.HasIndex("VehicleId", "Timestamp");

                    b.ToTable("TelematicsEvents");
                });

            modelBuilder.Entity("TelematicsCore.Models.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("DistanceTraveled")
                        .HasColumnType("float");

                    b.Property<Point>("EndLocation")
                        .HasColumnType("geography");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCount")
                        .HasColumnType("int");

                    b.Property<double?>("FuelConsumed")
                        .HasColumnType("float");

                    b.Property<double?>("MaxSpeed")
                        .HasColumnType("float");

                    b.Property<Point>("StartLocation")
                        .HasColumnType("geography");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId", "StartTime");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TelematicsCore.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("VehicleIdentifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleIdentifier")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TelematicsCore.Models.Alert", b =>
                {
                    b.HasOne("TelematicsCore.Models.TelematicsEvent", "TelematicsEvent")
                        .WithMany("Alerts")
                        .HasForeignKey("TelematicsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelematicsCore.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TelematicsEvent");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TelematicsCore.Models.TelematicsEvent", b =>
                {
                    b.HasOne("TelematicsCore.Models.Vehicle", "Vehicle")
                        .WithMany("TelematicsEvents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TelematicsCore.Models.Trip", b =>
                {
                    b.HasOne("TelematicsCore.Models.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TelematicsCore.Models.TelematicsEvent", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("TelematicsCore.Models.Vehicle", b =>
                {
                    b.Navigation("TelematicsEvents");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
