name: TelematicsHQ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Backend .NET API Testing
  backend-test:
    name: Backend Tests (.NET)
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'YourStrong!Passw0rd'
          ACCEPT_EULA: 'Y'
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore TelematicsDataPlatform.sln

    - name: Build solution
      run: dotnet build TelematicsDataPlatform.sln --no-restore --configuration Release

    - name: Wait for SQL Server
      run: |
        until docker exec $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest) /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1'; do
          echo "Waiting for SQL Server..."
          sleep 5
        done

    - name: Run backend tests
      run: dotnet test TelematicsTests/TelematicsTests.csproj --no-build --configuration Release --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TelematicsDB_Test;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true"

    - name: Generate test coverage
      run: |
        dotnet test TelematicsTests/TelematicsTests.csproj \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: ./coverage

  # Frontend Angular Testing
  frontend-test:
    name: Frontend Tests (Angular)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'telematics-ui/package-lock.json'

    - name: Install dependencies
      working-directory: ./telematics-ui
      run: npm ci

    - name: Run ESLint
      working-directory: ./telematics-ui
      run: npm run lint || true

    - name: Run unit tests
      working-directory: ./telematics-ui
      run: npm run test:ci

    - name: Build production
      working-directory: ./telematics-ui
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./telematics-ui/dist/

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: ./telematics-ui/coverage/

  # Integration Testing
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'YourStrong!Passw0rd'
          ACCEPT_EULA: 'Y'
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'telematics-ui/package-lock.json'

    - name: Build backend
      run: |
        dotnet restore TelematicsDataPlatform.sln
        dotnet build TelematicsDataPlatform.sln --configuration Release

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./telematics-ui/dist/

    - name: Start backend API
      run: |
        cd TelematicsApi
        dotnet run --configuration Release --urls="http://localhost:5000" &
        sleep 10
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TelematicsDB_Integration;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true"

    - name: Run API health check
      run: |
        curl -f http://localhost:5000/api/health || exit 1
        curl -f http://localhost:5000/api/health/metrics || exit 1

    - name: Run integration tests
      run: dotnet test TelematicsTests/TelematicsTests.csproj --filter "Category=Integration" --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TelematicsDB_Integration;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true"

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./TelematicsApi/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/telematics-api:latest
          ${{ secrets.DOCKER_USERNAME }}/telematics-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./telematics-ui
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/telematics-ui:latest
          ${{ secrets.DOCKER_USERNAME }}/telematics-ui:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Full Stack Docker Build and Push to GitHub Registry
  fullstack-docker:
    name: Full Stack Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/telematics-fullstack
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push full-stack image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.fullstack
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate deployment manifest
      run: |
        cat > deployment-manifest.yml << EOF
        # TelematicsHQ Full Stack Deployment
        # Image: ${{ steps.meta.outputs.tags }}
        # Built: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        # Commit: ${{ github.sha }}
        
        version: '3.8'
        services:
          telematics-fullstack:
            image: ghcr.io/${{ github.repository }}/telematics-fullstack:latest
            ports:
              - "80:80"
              - "5000:5000"
            environment:
              - ASPNETCORE_ENVIRONMENT=Production
              - ConnectionStrings__DefaultConnection=\${DATABASE_CONNECTION_STRING}
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            restart: unless-stopped
        EOF

    - name: Upload deployment manifest
      uses: actions/upload-artifact@v4
      with:
        name: deployment-manifest
        path: deployment-manifest.yml

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run performance tests
      run: |
        dotnet build TelematicsDataPlatform.sln --configuration Release
        # Add performance testing tools like NBomber or k6
        echo "Performance tests would run here"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment scripts here
        # kubectl apply -f k8s/staging/
        # or docker-compose deployment

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging"
        # Add smoke test commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, docker-build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment scripts
        # kubectl apply -f k8s/production/
        # Blue-green deployment scripts

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment validation"
        # Health checks and validation tests

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: '🚀 TelematicsHQ successfully deployed to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '❌ TelematicsHQ production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      run: dotnet restore TelematicsDataPlatform.sln

    - name: Install frontend dependencies
      working-directory: ./telematics-ui
      run: npm ci

    - name: Run code quality checks
      run: |
        echo "Running comprehensive code quality analysis"
        # Additional quality checks can be added here